name: Build-Release

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "tag: git tag you want create. (sample 1.0.0)"
        required: true
      dry-run:
        description: "dry-run: true will never create relase/nuget."
        required: true
        default: false
        type: boolean

env:
  GIT_TAG: ${{ github.event.inputs.tag }}
  DRY_RUN: ${{ github.event.inputs.dry-run }}

jobs:
  update-packagejson:
    uses: Cysharp/Actions/.github/workflows/update-packagejson.yaml@main
    with:
      file-path: ./src/ZString.Unity/Assets/Scripts/ZString/package.json
      tag: ${{ github.event.inputs.tag }}
      dry-run: ${{ fromJson(github.event.inputs.dry-run) }}

  build-dotnet:
    needs: [update-packagejson]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - run: echo ${{ needs.update-packagejson.outputs.sha }}
      - uses: actions/checkout@v3
        with:
          ref: ${{ needs.update-packagejson.outputs.sha }}
      - uses: Cysharp/Actions/.github/actions/setup-dotnet@main
        with:
          dotnet-version: |
            6.0.x
      # pack nuget
      - run: dotnet build -c Release -p:Version=${{ env.GIT_TAG }}
      - run: dotnet test tests/ZString.Tests -c Release --no-build
      - run: dotnet pack -c Release --no-build -p:Version=${{ env.GIT_TAG }} -o ./publish
      # Store artifacts.
      - uses: actions/upload-artifact@v2
        with:
          name: nuget
          path: ./publish/

  build-unity:
    needs: [update-packagejson]
    strategy:
      matrix:
        unity: ["2021.3.11f1"]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ needs.update-packagejson.outputs.sha }}
      # Execute scripts: Export Package
      # /opt/Unity/Editor/Unity -quit -batchmode -nographics -silent-crashes -logFile -projectPath . -executeMethod PackageExporter.Export
      - name: Build Unity (.unitypacakge)
        uses: Cysharp/Actions/.github/actions/unity-builder@main
        env:
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
          UNITY_PACKAGE_VERSION: ${{ env.GIT_TAG }}
        with:
          projectPath: src/ZString.Unity
          unityVersion: ${{ matrix.unity }}
          targetPlatform: StandaloneLinux64
          buildMethod: PackageExporter.Export

      - uses: Cysharp/Actions/.github/actions/check-metas@main # check meta files
        with:
          directory: src/ZString.Unity

      # Store artifacts.
      - uses: actions/upload-artifact@v2
        with:
          name: ZString.Unity.${{ env.GIT_TAG }}.unitypackage
          path: ./src/ZString.Unity/ZString.Unity.${{ env.GIT_TAG }}.unitypackage

  create-release:
    if: github.event.inputs.dry-run == 'false'
    needs: [update-packagejson, build-dotnet, build-unity]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: Cysharp/Actions/.github/actions/setup-dotnet@main
      # Create Release
      - uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.GIT_TAG }}
          release_name: Ver.${{ env.GIT_TAG }}
          commitish: ${{ needs.update-packagejson.outputs.sha }}
          draft: true
          prerelease: false
      # Download (All) Artifacts to current directory
      - uses: actions/download-artifact@v2
      # Upload to NuGet
      - run: dotnet nuget push "./nuget/*.nupkg" --skip-duplicate -s https://www.nuget.org/api/v2/package -k ${{ secrets.NUGET_KEY }}
      # Upload to Releases(unitypackage)
      - uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./ZString.Unity.${{ env.GIT_TAG }}.unitypackage/ZString.Unity.${{ env.GIT_TAG }}.unitypackage
          asset_name: ZString.Unity.${{ env.GIT_TAG }}.unitypackage
          asset_content_type: application/octet-stream

  cleanup:
    if: needs.update-packagejson.outputs.is-branch-created == 'true'
    needs: [update-packagejson, build-dotnet, build-unity]
    uses: Cysharp/Actions/.github/workflows/clean-packagejson-branch.yaml@main
    with:
      branch: ${{ needs.update-packagejson.outputs.branch-name }}
